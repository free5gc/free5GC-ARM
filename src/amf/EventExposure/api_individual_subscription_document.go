/*
 * Namf_EventExposure
 *
 * AMF Event Exposure Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package EventExposure

import (
	"free5gc/lib/openapi/models"
	"free5gc/src/amf/amf_context"
	"free5gc/src/amf/amf_producer"
	"net/http"
	"reflect"

	"github.com/gin-gonic/gin"
)

// DeleteSubscription - Namf_EventExposure Unsubscribe service Operation
func DeleteSubscription(c *gin.Context) {
	subscriptionId := c.Param("subscriptionId")
	self := amf_context.AMF_Self()
	problem := amf_producer.DeleteAMFEventSubscription(self, subscriptionId)
	if problem.Cause != "" {
		c.JSON(int(problem.Status), problem)
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

// ModifySubscription - Namf_EventExposure Subscribe Modify service Operation
func ModifySubscription(c *gin.Context) {

	var modifySubscriptionRequest models.ModifySubscriptionRequest
	v := reflect.ValueOf(&modifySubscriptionRequest).Elem()
	for i := 0; i < v.NumField(); i++ {
		value := v.Field(i)
		fieldType := value.Type()
		ptr := reflect.New(fieldType.Elem())
		value.Set(ptr)
		if err := c.ShouldBindJSON(value.Interface()); err == nil {
			break
		}
		value.Set(reflect.Zero(fieldType))
	}
	subscriptionId := c.Param("subscriptionId")
	self := amf_context.AMF_Self()
	problem := amf_producer.ModifyAMFEventSubscription(self, subscriptionId, modifySubscriptionRequest)
	if problem.Cause != "" {
		c.JSON(int(problem.Status), problem)
	} else {
		response := models.AmfUpdatedEventSubscription{}
		response.Subscription = &self.EventSubscriptions[subscriptionId].EventSubscription
		c.JSON(http.StatusOK, response)
	}
}
