/*
 * NRF NFManagement Service
 *
 * NRF NFManagement Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package Management

import (
	"encoding/json"
	"fmt"
	"free5gc/lib/MongoDBLibrary"
	"free5gc/lib/TimeDecode"
	"free5gc/lib/openapi/models"
	"free5gc/src/nrf/logger"
	"free5gc/src/nrf/nrf_handler/nrf_message"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
)

// DeregisterNFInstance - Deregisters a given NF Instance
func DeregisterNFInstance(c *gin.Context) {
	//parse nfInstanceId
	InstanceID := strings.Split(c.Request.URL.Path, "/")
	nfInstanceId := InstanceID[4]

	collName := "NfProfile"
	filter := bson.M{"nfInstanceId": nfInstanceId}

	nfProfilesRaw := MongoDBLibrary.RestfulAPIGetMany(collName, filter)
	time.Sleep(time.Duration(1) * time.Second)

	MongoDBLibrary.RestfulAPIDeleteMany(collName, filter)

	// nfProfile data for response
	nfProfiles, err := TimeDecode.Decode(nfProfilesRaw, time.RFC3339)
	if err != nil {
		logger.ManagementLog.Info(err)
	}

	uriList := getNofificationUri(nfProfiles[0])

	//make nfInstanceUri
	localIP := getServiceIp()
	uri := fmt.Sprintf("%s%s%s%s%s", "https://", localIP, ":29510", "/nnrf-nfm/v1/nf-instances/", nfInstanceId)
	//set info for NotificationData
	Notification_event := models.NotificationEventType_DEREGISTERED
	nfInstanceUri := uri
	handler_event := nrf_message.EventNotificationNFDeregisted

	if len(uriList) > 0 {
		var rsp nrf_message.HandlerResponseMessage
		for _, uri := range uriList {
			rsp = HandlerSendMessage(Notification_event, nfInstanceUri, handler_event, uri, c)
		}

		httpResponse := rsp.HTTPResponse
		if httpResponse.Status == http.StatusNoContent {
			c.JSON(http.StatusNoContent, gin.H{})
		}
	} else {
		c.JSON(http.StatusNoContent, gin.H{})
	}

}

// GetNFInstance - Read the profile of a given NF Instance
func GetNFInstance(c *gin.Context) {

	InstanceID := strings.Split(c.Request.URL.Path, "/")
	nfInstanceId := InstanceID[4]

	collName := "NfProfile"
	filter := bson.M{"nfInstanceId": nfInstanceId}
	nf := MongoDBLibrary.RestfulAPIGetOne(collName, filter)

	c.JSON(http.StatusOK, nf)
}

// RegisterNFInstance - Register a new NF Instance
func RegisterNFInstance(c *gin.Context) {
	var nfprofile models.NfProfile
	var nf models.NfProfile

	if err := c.ShouldBindJSON(&nfprofile); err != nil {
		logger.ManagementLog.Info(err.Error())
	}

	localIP := getServiceIp()

	if nnrfNFManagementDataMoudel(&nf, nfprofile) {

		//make location header
		locationHeader := setLocationHeader(nfprofile, localIP)
		//Marshal nf to bson
		tmp, _ := json.Marshal(nf)
		var putData = bson.M{}
		json.Unmarshal(tmp, &putData)
		//set db info
		collName := "NfProfile"
		nfInstanceId := nf.NfInstanceId
		filter := bson.M{"nfInstanceId": nfInstanceId}

		if MongoDBLibrary.RestfulAPIPutOne(collName, filter, putData) { //true insert
			uriList := getNofificationUri(nf)

			//set info for NotificationData
			Notification_event := models.NotificationEventType_PROFILE_CHANGED
			nfInstanceUri := locationHeader
			handler_event := nrf_message.EventNotificationNFRegisted

			//receive the rsp from handler
			if len(uriList) > 0 {
				var rsp nrf_message.HandlerResponseMessage
				for _, uri := range uriList {
					rsp = HandlerSendMessage(Notification_event, nfInstanceUri, handler_event, uri, c)
				}
				httpResponse := rsp.HTTPResponse
				if httpResponse.Status == http.StatusNoContent {
					//set location header
					c.Writer.Header().Set("Location", locationHeader)
					c.JSON(http.StatusOK, putData)
				}
				return
			} else {
				c.Writer.Header().Set("Location", locationHeader)
				c.JSON(http.StatusOK, putData)
				return
			}

		} else { //false update
			uriList := getNofificationUri(nf)
			//set info for NotificationData
			Notification_event := models.NotificationEventType_REGISTERED
			nfInstanceUri := locationHeader
			handler_event := nrf_message.EventNotificationNFRegisted

			if len(uriList) > 0 {
				var rsp nrf_message.HandlerResponseMessage
				for _, uri := range uriList {
					rsp = HandlerSendMessage(Notification_event, nfInstanceUri, handler_event, uri, c)
				}
				//set httpResponse
				httpResponse := rsp.HTTPResponse
				if httpResponse.Status == http.StatusNoContent {
					//set location header
					c.Writer.Header().Set("Location", locationHeader)
					c.JSON(http.StatusCreated, putData)
				}
				return
			} else {
				c.Writer.Header().Set("Location", locationHeader)
				c.JSON(http.StatusCreated, putData)
				return
			}
		}

	} else {

		str1 := fmt.Sprint(nfprofile.HeartBeatTimer)
		var problemDetails = models.ProblemDetails{
			Title:  nfprofile.NfInstanceId,
			Status: http.StatusBadRequest,
			Detail: str1,
		}
		c.JSON(http.StatusBadRequest, problemDetails)
		return
	}
}

// UpdateNFInstance - Update NF Instance profile
func UpdateNFInstance(c *gin.Context) {

	InstanceID := strings.Split(c.Request.URL.Path, "/")
	nfInstanceId := InstanceID[4]

	collName := "NfProfile"
	filter := bson.M{"nfInstanceId": nfInstanceId}

	patchJSON, _ := ioutil.ReadAll(c.Request.Body)

	if MongoDBLibrary.RestfulAPIJSONPatch(collName, filter, patchJSON) {
		nf := MongoDBLibrary.RestfulAPIGetOne(collName, filter)

		nfProfilesRaw := []map[string]interface{}{
			nf,
		}

		nfProfiles, err := TimeDecode.Decode(nfProfilesRaw, time.RFC3339)
		if err != nil {
			logger.ManagementLog.Info(err.Error())
		}
		uriList := getNofificationUri(nfProfiles[0])

		//make nfInstanceUri
		localIP := getServiceIp()
		uri := fmt.Sprintf("%s%s%s%s%s", "https://", localIP, ":29510", "/nnrf-nfm/v1/nf-instances/", nfInstanceId)
		//set info for NotificationData
		Notification_event := models.NotificationEventType_PROFILE_CHANGED
		nfInstanceUri := uri
		handler_event := nrf_message.EventNotificationNFProfileChanged

		if len(uriList) > 0 {
			var rsp nrf_message.HandlerResponseMessage
			for _, uri := range uriList {
				rsp = HandlerSendMessage(Notification_event, nfInstanceUri, handler_event, uri, c)
			}
			httpResponse := rsp.HTTPResponse

			if httpResponse.Status == http.StatusNoContent {
				c.JSON(http.StatusOK, nf)
			}
		} else {
			c.JSON(http.StatusOK, nf)
		}
	} else {
		c.JSON(http.StatusNoContent, gin.H{})
	}

}
