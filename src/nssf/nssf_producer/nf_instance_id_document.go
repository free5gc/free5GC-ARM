/*
 * NSSF NSSAI Availability
 *
 * NSSF NSSAI Availability Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nssf_producer

import (
	"net/http"

	"free5gc/lib/http_wrapper"
	. "free5gc/lib/openapi/models"
	"free5gc/src/nssf/logger"
	"free5gc/src/nssf/nssf_handler/nssf_message"
	. "free5gc/src/nssf/plugin"
)

// NSSAIAvailabilityDelete - Deletes an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityDelete(responseChan chan nssf_message.HandlerResponseMessage, nfId string) {

	logger.Nssaiavailability.Infof("Request received - NSSAIAvailabilityDelete")

	var (
		status int
		d      ProblemDetails
	)

	status = nssaiavailabilityDelete(nfId, &d)

	if status == http.StatusNoContent {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
			},
		}
	} else {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
				Body:   d,
			},
		}
	}
}

// NSSAIAvailabilityPatch - Updates an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
func NSSAIAvailabilityPatch(responseChan chan nssf_message.HandlerResponseMessage, nfId string, p PatchDocument) {

	logger.Nssaiavailability.Infof("Request received - NSSAIAvailabilityPatch")

	var (
		isValidRequest bool = true
		status         int
		a              AuthorizedNssaiAvailabilityInfo
		d              ProblemDetails
	)

	// TODO: Request NfProfile of NfId from NRF
	//       Check if NfId is valid AMF and obtain AMF Set ID
	//       If NfId is invalid, return ProblemDetails with code 404 Not Found
	//       If NF consumer is not authorized to update NSSAI availability, return ProblemDetails with code 403 Forbidden

	if isValidRequest {
		status = nssaiavailabilityPatch(nfId, p, &a, &d)
	}

	if status == http.StatusOK {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
				Body:   a,
			},
		}
	} else {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
				Body:   d,
			},
		}
	}
}

// NSSAIAvailabilityPut - Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g AMF) supports per TA
func NSSAIAvailabilityPut(responseChan chan nssf_message.HandlerResponseMessage, nfId string, n NssaiAvailabilityInfo) {

	logger.Nssaiavailability.Infof("Request received - NSSAIAvailabilityPut")

	var (
		isValidRequest bool = true
		status         int
		a              AuthorizedNssaiAvailabilityInfo
		d              ProblemDetails
	)

	// TODO: Request NfProfile of NfId from NRF
	//       Check if NfId is valid AMF and obtain AMF Set ID
	//       If NfId is invalid, return ProblemDetails with code 404 Not Found
	//       If NF consumer is not authorized to update NSSAI availability, return ProblemDetails with code 403 Forbidden

	if isValidRequest {
		status = nssaiavailabilityPut(nfId, n, &a, &d)
	}

	if status == http.StatusOK {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
				Body:   a,
			},
		}
	} else {
		responseChan <- nssf_message.HandlerResponseMessage{
			HttpResponse: &http_wrapper.Response{
				Header: nil,
				Status: status,
				Body:   d,
			},
		}
	}
}
