/*
 * Nudm_SDM
 *
 * Nudm Subscriber Data Management Service
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package SubscriberDataManagement

import (

	// "github.com/antihax/optional"

	// "log"

	"testing"
)

// GetSmData - retrieve a UE's Session Management Subscription Data
func TestGetSmData(t *testing.T) {

	/*go func() {
		router := gin.Default()
		AddService(router)

		udmLogPath := path_util.Gofree5gcPath("free5gc/udrmslkey.log")
		udmPemPath := path_util.Gofree5gcPath("free5gc/support/TLS/udm.pem")
		udmKeyPath := path_util.Gofree5gcPath("free5gc/support/TLS/udm.key")

		server, err := http2_util.NewServer(":29503", udmLogPath, router)
		if err == nil && server != nil {
			err := server.ListenAndServeTLS(udmPemPath, udmKeyPath)
			assert.True(t, err == nil)
		}
	}()
	udm_util.testInitUdmConfig()
	go udm_handler.Handle()

	go func() {
		router := gin.Default()
		DataRepository.AddService(router)

		udrLogPath := path_util.Gofree5gcPath("free5gc/udrsslkey.log")
		udrPemPath := path_util.Gofree5gcPath("free5gc/support/TLS/udr.pem")
		udrKeyPath := path_util.Gofree5gcPath("free5gc/support/TLS/udr.key")

		server, err := http2_util.NewServer(":29504", udrLogPath, router)
		if err == nil && server != nil {
			err := server.ListenAndServeTLS(udrPemPath, udrKeyPath)
			assert.True(t, err == nil)
		}
	}()

	MongoDBLibrary.SetMongoDB("free5gc", "mongodb://localhost:27017")
	Client := MongoDBLibrary.Client

	alwaysEqual := cmp.Comparer(func(_, _ interface{}) bool { return true })

	// This option handles slices and maps of any type.
	Opt := cmp.FilterValues(func(x, y interface{}) bool {
		vx, vy := reflect.ValueOf(x), reflect.ValueOf(y)
		// fmt.Println(vx.Kind(), "and", vy.Kind())
		return (vx.IsValid() && vy.IsValid() && vx.Type() == vy.Type()) &&
			(vx.Kind() == reflect.Map || vx.Kind() == reflect.Slice)
	}, alwaysEqual)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.provisionedData.smData")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})

	// Set client and set url
	configuration := Nudm_SubscriberDataManagement.NewConfiguration()
	configuration.SetBasePath("https://localhost:29503") // UDM Client
	clientAPI := Nudm_SubscriberDataManagement.NewAPIClient(configuration)

	// Set test data
	ueId := "imsi-0123456789"
	servingPlmnId := "20893"
	{
		testData := models.SessionManagementSubscriptionData{
			SharedDnnConfigurationsIds: "1",
		}
		tmp, _ := json.Marshal(testData)
		var insertTestData = bson.M{}
		json.Unmarshal(tmp, &insertTestData)
		insertTestData["ueId"] = ueId
		insertTestData["servingPlmnId"] = servingPlmnId
		collection.InsertOne(context.TODO(), insertTestData)
	}

	{
		testData := models.SessionManagementSubscriptionData{
			SharedDnnConfigurationsIds: "2",
		}
		tmp, _ := json.Marshal(testData)
		var insertTestData = bson.M{}
		json.Unmarshal(tmp, &insertTestData)
		insertTestData["ueId"] = ueId
		insertTestData["servingPlmnId"] = servingPlmnId
		collection.InsertOne(context.TODO(), insertTestData)
	}

	testData := []models.SessionManagementSubscriptionData{
		models.SessionManagementSubscriptionData{
			SharedDnnConfigurationsIds: "1",
		},
		models.SessionManagementSubscriptionData{
			SharedDnnConfigurationsIds: "2",
		},
	}
	tmp, _ := json.Marshal(testData)
	var insertTestData = bson.M{}
	json.Unmarshal(tmp, &insertTestData)
	insertTestData["ueId"] = ueId
	insertTestData["servingPlmnId"] = servingPlmnId
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		sessionManagementSubscriptionDatas, res, err := clientAPI.SessionManagementSubscriptionDataRetrievalApi.GetSmData(context.TODO(), ueId, nil)
		if err != nil {
			// log.Panic(err)
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, sessionManagementSubscriptionDatas, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				sessionManagementSubscriptionDatas, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})

	// TEST END*/
}
