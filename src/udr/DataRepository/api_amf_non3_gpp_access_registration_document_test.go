/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"go.mongodb.org/mongo-driver/bson"
	"free5gc/src/udr/logger"
	"net/http"
	"testing"

	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"

	"github.com/antihax/optional"

	"github.com/google/go-cmp/cmp"
)

// AmfContextNon3gpp - To modify the AMF context data of a UE using non 3gpp access in the UDR
func TestAmfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.amfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.AmfNon3GppAccessRegistration{
		AmfInstanceId:    "AmfInstanceId_test",
		ImsVoPs:          models.ImsVoPs_HOMOGENEOUS_SUPPORT,
		DeregCallbackUri: "DeregCallbackUri_test",
		Guami: &models.Guami{
			PlmnId: &models.PlmnId{
				Mcc: "208",
				Mnc: "93",
			},
			AmfId: "1",
		},
		RatType: models.RatType_NR,
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check patch data (Use RESTful GET)
		var queryAmfContextNon3gppParamOpts Nudr_DataRepository.QueryAmfContextNon3gppParamOpts
		amfNon3GppAccessRegistration, res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.QueryAmfContextNon3gpp(context.TODO(), ueId, &queryAmfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
		if cmp.Equal(testData, amfNon3GppAccessRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				amfNon3GppAccessRegistration, testData)
		}
	}

	patchItemArray := []models.PatchItem{
		{
			Op:    models.PatchOperation_REPLACE,
			Path:  "/amfInstanceId",
			Value: "AAA",
		},
	}
	patchData := models.AmfNon3GppAccessRegistration{
		AmfInstanceId:    "AAA",
		ImsVoPs:          models.ImsVoPs_HOMOGENEOUS_SUPPORT,
		DeregCallbackUri: "DeregCallbackUri_test",
		Guami: &models.Guami{
			PlmnId: &models.PlmnId{
				Mcc: "208",
				Mnc: "93",
			},
			AmfId: "1",
		},
		RatType: models.RatType_NR,
	}

	{
		// Patch data (Use RESTful PATCH)
		res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.AmfContextNon3gpp(context.TODO(), ueId, patchItemArray)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	{
		// Check patch data (Use RESTful GET)
		var queryAmfContextNon3gppParamOpts Nudr_DataRepository.QueryAmfContextNon3gppParamOpts
		amfNon3GppAccessRegistration, res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.QueryAmfContextNon3gpp(context.TODO(), ueId, &queryAmfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(patchData, amfNon3GppAccessRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				amfNon3GppAccessRegistration, patchData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}

// CreateAmfContextNon3gpp - To store the AMF context data of a UE using non-3gpp access in the UDR
func TestCreateAmfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.amfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.AmfNon3GppAccessRegistration{
		AmfInstanceId:    "AmfInstanceId_test",
		ImsVoPs:          models.ImsVoPs_HOMOGENEOUS_SUPPORT,
		DeregCallbackUri: "DeregCallbackUri_test",
		Guami: &models.Guami{
			PlmnId: &models.PlmnId{
				Mcc: "208",
				Mnc: "93",
			},
			AmfId: "1",
		},
		RatType: models.RatType_NR,
	}

	{
		// Insert test data (Use RESTful PUT)
		var createAmfContextNon3gppParamOpts Nudr_DataRepository.CreateAmfContextNon3gppParamOpts
		createAmfContextNon3gppParamOpts.AmfNon3GppAccessRegistration = optional.NewInterface(testData)
		res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.CreateAmfContextNon3gpp(context.TODO(), ueId, &createAmfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	{
		// Check test data (Use RESTful GET)
		var queryAmfContextNon3gppParamOpts Nudr_DataRepository.QueryAmfContextNon3gppParamOpts
		amfNon3GppAccessRegistration, res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.QueryAmfContextNon3gpp(context.TODO(), ueId, &queryAmfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, amfNon3GppAccessRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				amfNon3GppAccessRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}

// QueryAmfContextNon3gpp - Retrieves the AMF context data of a UE using non-3gpp access
func TestQueryAmfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.amfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.AmfNon3GppAccessRegistration{
		AmfInstanceId:    "AmfInstanceId_test",
		ImsVoPs:          models.ImsVoPs_HOMOGENEOUS_SUPPORT,
		DeregCallbackUri: "DeregCallbackUri_test",
		Guami: &models.Guami{
			PlmnId: &models.PlmnId{
				Mcc: "208",
				Mnc: "93",
			},
			AmfId: "1",
		},
		RatType: models.RatType_NR,
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		var queryAmfContextNon3gppParamOpts Nudr_DataRepository.QueryAmfContextNon3gppParamOpts
		amfNon3GppAccessRegistration, res, err := client.AMFNon3GPPAccessRegistrationDocumentApi.QueryAmfContextNon3gpp(context.TODO(), ueId, &queryAmfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, amfNon3GppAccessRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				amfNon3GppAccessRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}
