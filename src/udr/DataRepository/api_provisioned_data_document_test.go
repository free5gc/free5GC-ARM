/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"free5gc/src/udr/logger"
	"net/http"
	"testing"

	"github.com/google/go-cmp/cmp"
	"go.mongodb.org/mongo-driver/bson"
	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"
)

// QueryProvisionedData - Retrieve multiple provisioned data sets of a UE
func TestQueryProvisionedData(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	servingPlmnId := "20893"

	{
		// Drop old data
		collection := Client.Database("free5gc").Collection("subscriptionData.provisionedData.amData")
		collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})

		// Set test data
		testData := models.AccessAndMobilitySubscriptionData{
			UeUsageType: 1,
		}
		insertTestData := toBsonM(testData)
		insertTestData["ueId"] = ueId
		insertTestData["servingPlmnId"] = servingPlmnId
		collection.InsertOne(context.TODO(), insertTestData)
	}

	{
		// Drop old data
		collection := Client.Database("free5gc").Collection("subscriptionData.provisionedData.smfSelectionSubscriptionData")
		collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})

		// Set test data
		testData := models.SmfSelectionSubscriptionData{
			SharedSnssaiInfosId: "2",
		}
		insertTestData := toBsonM(testData)
		insertTestData["ueId"] = ueId
		insertTestData["servingPlmnId"] = servingPlmnId
		collection.InsertOne(context.TODO(), insertTestData)
	}

	testData := models.ProvisionedDataSets{
		AmData: &models.AccessAndMobilitySubscriptionData{
			UeUsageType: 1,
		},
		SmfSelData: &models.SmfSelectionSubscriptionData{
			SharedSnssaiInfosId: "2",
		},
	}

	{
		// Check test data (Use RESTful GET)
		var queryProvisionedDataParamOpts Nudr_DataRepository.QueryProvisionedDataParamOpts
		provisionedDataSets, res, err := client.ProvisionedDataDocumentApi.QueryProvisionedData(context.TODO(), ueId, servingPlmnId, &queryProvisionedDataParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, provisionedDataSets, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				provisionedDataSets, testData)
			t.Errorf("%v %v", provisionedDataSets.SmfSelData.SharedSnssaiInfosId, testData.SmfSelData.SharedSnssaiInfosId)
		}
	}

	// Clean test data
	{
		collection := Client.Database("free5gc").Collection("subscriptionData.provisionedData.amData")
		collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})
	}
	{
		collection := Client.Database("free5gc").Collection("subscriptionData.provisionedData.smfSelectionSubscriptionData")
		collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "servingPlmnId": "20893"})
	}

	// TEST END
}
