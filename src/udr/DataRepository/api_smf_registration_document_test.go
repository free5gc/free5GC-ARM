/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"free5gc/lib/openapi/common"
	"free5gc/src/udr/logger"
	"log"
	"net/http"
	"reflect"
	"testing"

	"github.com/antihax/optional"
	"go.mongodb.org/mongo-driver/bson"
	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"
)

// CreateSmfContextNon3gpp - To create an individual SMF context data of a UE in the UDR
func TestCreateSmfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smfRegistrations")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	pduSessionId := "1"
	pduSessionIdInt := 1
	testData := models.SmfRegistration{
		SmfInstanceId: "SmfInstanceId_Test",
		PduSessionId:  1,
		SingleNssai: &models.Snssai{
			Sst: 1,
		},
		Dnn: "Dnn_Test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}

	{
		// Insert test data (Use RESTful PUT)
		var createSmfContextNon3gppParamOpts Nudr_DataRepository.CreateSmfContextNon3gppParamOpts
		createSmfContextNon3gppParamOpts.SmfRegistration = optional.NewInterface(testData)
		res, err := client.SMFRegistrationDocumentApi.CreateSmfContextNon3gpp(context.TODO(), ueId, int32(pduSessionIdInt), &createSmfContextNon3gppParamOpts)
		if err != nil {
			log.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK && status != http.StatusCreated {
			t.Errorf("handler returned wrong status code: got %v want %v or %v",
				status, http.StatusOK, http.StatusCreated)
		}
	}

	{
		// Check test data (Use RESTful GET)
		var querySmfRegistrationParamOpts Nudr_DataRepository.QuerySmfRegistrationParamOpts
		smfRegistration, res, err := client.SMFRegistrationDocumentApi.QuerySmfRegistration(context.TODO(), ueId, pduSessionId, &querySmfRegistrationParamOpts)
		if err != nil {
			log.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if reflect.DeepEqual(testData, smfRegistration) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smfRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// TEST END
}

// DeleteSmfContext - To remove an individual SMF context data of a UE the UDR
func TestDeleteSmfContext(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smfRegistrations")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	pduSessionId := "1"
	pduSessionIdInt := 1
	testData := models.SmfRegistration{
		SmfInstanceId: "SmfInstanceId_Test",
		PduSessionId:  1,
		SingleNssai: &models.Snssai{
			Sst: 1,
		},
		Dnn: "Dnn_Test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	insertTestData["pduSessionId"] = int32(pduSessionIdInt)
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		var querySmfRegistrationParamOpts Nudr_DataRepository.QuerySmfRegistrationParamOpts
		smfRegistration, res, err := client.SMFRegistrationDocumentApi.QuerySmfRegistration(context.TODO(), ueId, pduSessionId, &querySmfRegistrationParamOpts)
		if err != nil {
			log.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if reflect.DeepEqual(testData, smfRegistration) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smfRegistration, testData)
		}
	}

	{
		// delete test data (Use RESTful DELETE)
		res, err := client.SMFRegistrationDocumentApi.DeleteSmfContext(context.TODO(), ueId, pduSessionId)
		if err != nil {
			log.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	{
		// Check test data (Use RESTful GET)
		var querySmfRegistrationParamOpts Nudr_DataRepository.QuerySmfRegistrationParamOpts
		smfRegistration, res, err := client.SMFRegistrationDocumentApi.QuerySmfRegistration(context.TODO(), ueId, pduSessionId, &querySmfRegistrationParamOpts)
		if err != nil {
			logger.AppLog.Infof("404 Not Found : ProblemDetail: %v\n", err.(common.GenericOpenAPIError).Model().(models.ProblemDetails))
		}

		if status := res.StatusCode; status != http.StatusNotFound {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNotFound)
		}

		var empty models.SmfRegistration
		if reflect.DeepEqual(empty, smfRegistration) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smfRegistration, empty)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// TEST END
}

// QuerySmfRegistration - Retrieves the individual SMF registration of a UE
func TestQuerySmfRegistration(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smfRegistrations")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	pduSessionId := "1"
	pduSessionIdInt := 1
	testData := models.SmfRegistration{
		SmfInstanceId: "SmfInstanceId_Test",
		PduSessionId:  1,
		SingleNssai: &models.Snssai{
			Sst: 1,
		},
		Dnn: "Dnn_Test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	insertTestData["pduSessionId"] = int32(pduSessionIdInt)
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		var querySmfRegistrationParamOpts Nudr_DataRepository.QuerySmfRegistrationParamOpts
		smfRegistration, res, err := client.SMFRegistrationDocumentApi.QuerySmfRegistration(context.TODO(), ueId, pduSessionId, &querySmfRegistrationParamOpts)
		if err != nil {
			log.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}
		if reflect.DeepEqual(testData, smfRegistration) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smfRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789", "pduSessionId": 1})

	// TEST END
}
