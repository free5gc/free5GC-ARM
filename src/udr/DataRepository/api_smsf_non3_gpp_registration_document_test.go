/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository_test

import (
	"context"
	"free5gc/lib/openapi/common"
	"free5gc/src/udr/logger"
	"net/http"
	"testing"

	"github.com/antihax/optional"
	"github.com/google/go-cmp/cmp"
	"go.mongodb.org/mongo-driver/bson"
	"free5gc/lib/Nudr_DataRepository"
	"free5gc/lib/openapi/models"
)

// CreateSmsfContextNon3gpp - Create the SMSF context data of a UE via non-3GPP access
func TestCreateSmsfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smsfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.SmsfRegistration{
		SmsfInstanceId: "SmsfInstanceId_test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}

	{
		// Insert test data (Use RESTful PUT)
		var createSmsfContextNon3gppParamOpts Nudr_DataRepository.CreateSmsfContextNon3gppParamOpts
		createSmsfContextNon3gppParamOpts.SmsfRegistration = optional.NewInterface(testData)
		res, err := client.SMSFNon3GPPRegistrationDocumentApi.CreateSmsfContextNon3gpp(context.TODO(), ueId, &createSmsfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	{
		// Check test data (Use RESTful GET)
		var querySmsfContextNon3gppParamOpts Nudr_DataRepository.QuerySmsfContextNon3gppParamOpts
		smsfRegistration, res, err := client.SMSFNon3GPPRegistrationDocumentApi.QuerySmsfContextNon3gpp(context.TODO(), ueId, &querySmsfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, smsfRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smsfRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}

// DeleteSmsfContextNon3gpp - To remove the SMSF context data of a UE via non-3GPP access
func TestDeleteSmsfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smsfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.SmsfRegistration{
		SmsfInstanceId: "SmsfInstanceId_test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		var querySmsfContextNon3gppParamOpts Nudr_DataRepository.QuerySmsfContextNon3gppParamOpts
		smsfRegistration, res, err := client.SMSFNon3GPPRegistrationDocumentApi.QuerySmsfContextNon3gpp(context.TODO(), ueId, &querySmsfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, smsfRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smsfRegistration, testData)
		}
	}

	{
		// delete test data (Use RESTful DELETE)
		res, err := client.SMSFNon3GPPRegistrationDocumentApi.DeleteSmsfContextNon3gpp(context.TODO(), ueId)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusNoContent {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNoContent)
		}
	}

	{
		// Check test data (Use RESTful GET)
		var querySmsfContextNon3gppParamOpts Nudr_DataRepository.QuerySmsfContextNon3gppParamOpts
		smsfRegistration, res, err := client.SMSFNon3GPPRegistrationDocumentApi.QuerySmsfContextNon3gpp(context.TODO(), ueId, &querySmsfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Infof("404 Not Found : ProblemDetail: %v\n", err.(common.GenericOpenAPIError).Model().(models.ProblemDetails))
		}

		if status := res.StatusCode; status != http.StatusNotFound {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusNotFound)
		}

		var empty models.SmsfRegistration
		if cmp.Equal(empty, smsfRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smsfRegistration, empty)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}

// QuerySmsfContextNon3gpp - Retrieves the SMSF context data of a UE using non-3gpp access
func TestQuerySmsfContextNon3gpp(t *testing.T) {
	runTestServer(t)

	connectMongoDB(t)

	// Drop old data
	collection := Client.Database("free5gc").Collection("subscriptionData.contextData.smsfNon3gppAccess")
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// Set client and set url
	client := setTestClient(t)

	// Set test data
	ueId := "imsi-0123456789"
	testData := models.SmsfRegistration{
		SmsfInstanceId: "SmsfInstanceId_test",
		PlmnId: &models.PlmnId{
			Mcc: "208",
			Mnc: "93",
		},
	}
	insertTestData := toBsonM(testData)
	insertTestData["ueId"] = ueId
	collection.InsertOne(context.TODO(), insertTestData)

	{
		// Check test data (Use RESTful GET)
		var querySmsfContextNon3gppParamOpts Nudr_DataRepository.QuerySmsfContextNon3gppParamOpts
		smsfRegistration, res, err := client.SMSFNon3GPPRegistrationDocumentApi.QuerySmsfContextNon3gpp(context.TODO(), ueId, &querySmsfContextNon3gppParamOpts)
		if err != nil {
			logger.AppLog.Panic(err)
		}

		if status := res.StatusCode; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		if cmp.Equal(testData, smsfRegistration, Opt) != true {
			t.Errorf("handler returned unexpected body: got %v want %v",
				smsfRegistration, testData)
		}
	}

	// Clean test data
	collection.DeleteOne(context.TODO(), bson.M{"ueId": "imsi-0123456789"})

	// TEST END
}
