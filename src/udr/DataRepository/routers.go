/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	AddService(router)
	return router
}

func subMsgShortDispatchHandlerFunc(c *gin.Context) {
	var op = c.Param("ueId")
	for _, route := range subShortRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func subMsgDispatchHandlerFunc(c *gin.Context) {
	var op = c.Param("servingPlmnId")
	var subsToNotify = c.Param("ueId")
	for _, route := range subRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		// Sepcial case
		if subsToNotify == "subs-to-notify" && strings.Contains(route.Pattern, "subs-to-notify") && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "subsId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgShortDispatchHandlerFunc(c *gin.Context) {
	var groupData = c.Param("ueId")
	var contextData = c.Param("servingPlmnId")
	for _, route := range eeShortRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func eeMsgDispatchHandlerFunc(c *gin.Context) {
	var groupData = c.Param("ueId")
	var contextData = c.Param("servingPlmnId")
	for _, route := range eeRoutes {
		if strings.Contains(route.Pattern, groupData) && route.Method == c.Request.Method {
			c.Params = append(c.Params, gin.Param{Key: "ueGroupId", Value: c.Param("servingPlmnId")})
			route.HandlerFunc(c)
			return
		}
		if strings.Contains(route.Pattern, contextData) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func appMsgDispatchHandlerFunc(c *gin.Context) {
	var subsToNotify = c.Param("influenceId")
	for _, route := range appRoutes {
		if subsToNotify == "subs-to-notify" && strings.Contains(route.Pattern, "subs-to-notify") && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify != "subs-to-notify" && !strings.Contains(route.Pattern, "subs-to-notify") && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func expoMsgDispatchHandlerFunc(c *gin.Context) {
	var subsToNotify = c.Param("ueId")
	var op = c.Param("subId")
	for _, route := range expoRoutes {
		if strings.Contains(route.Pattern, op) && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
		if subsToNotify == "subs-to-notify" && strings.Contains(route.Pattern, "subs-to-notify") && route.Method == c.Request.Method {
			route.HandlerFunc(c)
			return
		}
	}
	c.String(http.StatusMethodNotAllowed, "Method Not Allowed")
}

func AddService(engine *gin.Engine) *gin.RouterGroup {
	group := engine.Group("/nudr-dr/v1")

	for _, route := range routes {
		switch route.Method {
		case "GET":
			group.GET(route.Pattern, route.HandlerFunc)
		case "PATCH":
			group.PATCH(route.Pattern, route.HandlerFunc)
		case "POST":
			group.POST(route.Pattern, route.HandlerFunc)
		case "PUT":
			group.PUT(route.Pattern, route.HandlerFunc)
		case "DELETE":
			group.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	var subPatternShort = "/subscription-data/:ueId"
	group.Any(subPatternShort, subMsgShortDispatchHandlerFunc)

	var subPattern = "/subscription-data/:ueId/:servingPlmnId"
	group.Any(subPattern, subMsgDispatchHandlerFunc)

	var eePatternShort = "/subscription-data/:ueId/:servingPlmnId/ee-subscriptions"
	group.Any(eePatternShort, eeMsgShortDispatchHandlerFunc)

	var eePattern = "/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId"
	group.Any(eePattern, eeMsgDispatchHandlerFunc)

	var appPattern = "/application-data/influenceData/:influenceId"
	group.Any(appPattern, appMsgDispatchHandlerFunc)

	var expoPatternShort = "/exposure-data/:ueId/:subId"
	group.Any(expoPatternShort, expoMsgDispatchHandlerFunc)

	var expoPattern = "/exposure-data/:ueId/:subId/:pduSessionId"
	group.Any(expoPattern, expoMsgDispatchHandlerFunc)

	return group
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/",
		Index,
	},

	{
		"AmfContext3gpp",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		AmfContext3gpp,
	},

	{
		"CreateAmfContext3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		CreateAmfContext3gpp,
	},

	{
		"QueryAmfContext3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/amf-3gpp-access",
		QueryAmfContext3gpp,
	},

	{
		"AmfContextNon3gpp",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		AmfContextNon3gpp,
	},

	{
		"CreateAmfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		CreateAmfContextNon3gpp,
	},

	{
		"QueryAmfContextNon3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/amf-non-3gpp-access",
		QueryAmfContextNon3gpp,
	},

	{
		"QueryAmData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data",
		QueryAmData,
	},

	{
		"QueryAuthenticationStatus",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-status",
		QueryAuthenticationStatus,
	},

	{
		"ModifyAuthentication",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
		ModifyAuthentication,
	},

	{
		"QueryAuthSubsData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-subscription",
		QueryAuthSubsData,
	},

	{
		"CreateAuthenticationSoR",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/sor-data",
		CreateAuthenticationSoR,
	},

	{
		"QueryAuthSoR",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/sor-data",
		QueryAuthSoR,
	},

	{
		"CreateAuthenticationStatus",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/authentication-status",
		CreateAuthenticationStatus,
	},

	{
		"ApplicationDataInfluenceDataGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData",
		ApplicationDataInfluenceDataGet,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		ApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		ApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut",
		strings.ToUpper("Put"),
		"/application-data/influenceData/:influenceId/:subscriptionId",
		ApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut,
	},

	{
		"ApplicationDataPfdsAppIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/pfds/:appId",
		ApplicationDataPfdsAppIdDelete,
	},

	{
		"ApplicationDataPfdsAppIdGet",
		strings.ToUpper("Get"),
		"/application-data/pfds/:appId",
		ApplicationDataPfdsAppIdGet,
	},

	{
		"ApplicationDataPfdsAppIdPut",
		strings.ToUpper("Put"),
		"/application-data/pfds/:appId",
		ApplicationDataPfdsAppIdPut,
	},

	{
		"ApplicationDataPfdsGet",
		strings.ToUpper("Get"),
		"/application-data/pfds",
		ApplicationDataPfdsGet,
	},

	{
		"PolicyDataBdtDataBdtReferenceIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/bdt-data/:bdtReferenceId",
		PolicyDataBdtDataBdtReferenceIdDelete,
	},

	{
		"PolicyDataBdtDataBdtReferenceIdGet",
		strings.ToUpper("Get"),
		"/policy-data/bdt-data/:bdtReferenceId",
		PolicyDataBdtDataBdtReferenceIdGet,
	},

	{
		"PolicyDataBdtDataBdtReferenceIdPut",
		strings.ToUpper("Put"),
		"/policy-data/bdt-data/:bdtReferenceId",
		PolicyDataBdtDataBdtReferenceIdPut,
	},

	{
		"PolicyDataBdtDataGet",
		strings.ToUpper("Get"),
		"/policy-data/bdt-data",
		PolicyDataBdtDataGet,
	},

	{
		"PolicyDataPlmnsPlmnIdUePolicySetGet",
		strings.ToUpper("Get"),
		"/policy-data/plmns/:plmnId/ue-policy-set",
		PolicyDataPlmnsPlmnIdUePolicySetGet,
	},

	{
		"PolicyDataSponsorConnectivityDataSponsorIdGet",
		strings.ToUpper("Get"),
		"/policy-data/sponsor-connectivity-data/:sponsorId",
		PolicyDataSponsorConnectivityDataSponsorIdGet,
	},

	{
		"PolicyDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/policy-data/subs-to-notify",
		PolicyDataSubsToNotifyPost,
	},

	{
		"PolicyDataSubsToNotifySubsIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/subs-to-notify/:subsId",
		PolicyDataSubsToNotifySubsIdDelete,
	},

	{
		"PolicyDataSubsToNotifySubsIdPut",
		strings.ToUpper("Put"),
		"/policy-data/subs-to-notify/:subsId",
		PolicyDataSubsToNotifySubsIdPut,
	},

	{
		"PolicyDataUesUeIdAmDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/am-data",
		PolicyDataUesUeIdAmDataGet,
	},

	{
		"PolicyDataUesUeIdOperatorSpecificDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/operator-specific-data",
		PolicyDataUesUeIdOperatorSpecificDataGet,
	},

	{
		"PolicyDataUesUeIdOperatorSpecificDataPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/operator-specific-data",
		PolicyDataUesUeIdOperatorSpecificDataPatch,
	},

	{
		"PolicyDataUesUeIdOperatorSpecificDataPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/operator-specific-data",
		PolicyDataUesUeIdOperatorSpecificDataPut,
	},

	{
		"PolicyDataUesUeIdSmDataGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/sm-data",
		PolicyDataUesUeIdSmDataGet,
	},

	{
		"PolicyDataUesUeIdSmDataPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/sm-data",
		PolicyDataUesUeIdSmDataPatch,
	},

	{
		"PolicyDataUesUeIdSmDataUsageMonIdDelete",
		strings.ToUpper("Delete"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		PolicyDataUesUeIdSmDataUsageMonIdDelete,
	},

	{
		"PolicyDataUesUeIdSmDataUsageMonIdGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		PolicyDataUesUeIdSmDataUsageMonIdGet,
	},

	{
		"PolicyDataUesUeIdSmDataUsageMonIdPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/sm-data/:usageMonId",
		PolicyDataUesUeIdSmDataUsageMonIdPut,
	},

	{
		"PolicyDataUesUeIdUePolicySetGet",
		strings.ToUpper("Get"),
		"/policy-data/ues/:ueId/ue-policy-set",
		PolicyDataUesUeIdUePolicySetGet,
	},

	{
		"PolicyDataUesUeIdUePolicySetPatch",
		strings.ToUpper("Patch"),
		"/policy-data/ues/:ueId/ue-policy-set",
		PolicyDataUesUeIdUePolicySetPatch,
	},

	{
		"PolicyDataUesUeIdUePolicySetPut",
		strings.ToUpper("Put"),
		"/policy-data/ues/:ueId/ue-policy-set",
		PolicyDataUesUeIdUePolicySetPut,
	},

	{
		"QueryProvisionedData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data",
		QueryProvisionedData,
	},

	{
		"RemovesdmSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
		RemovesdmSubscriptions,
	},

	{
		"Updatesdmsubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions/:subsId",
		Updatesdmsubscriptions,
	},

	{
		"CreateSdmSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
		CreateSdmSubscriptions,
	},

	{
		"Querysdmsubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/sdm-subscriptions",
		Querysdmsubscriptions,
	},

	{
		"CreateSmfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		CreateSmfContextNon3gpp,
	},

	{
		"DeleteSmfContext",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		DeleteSmfContext,
	},

	{
		"QuerySmfRegistration",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations/:pduSessionId",
		QuerySmfRegistration,
	},

	{
		"QuerySmfRegList",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smf-registrations",
		QuerySmfRegList,
	},

	{
		"QuerySmfSelectData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data",
		QuerySmfSelectData,
	},

	{
		"CreateSmsfContext3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		CreateSmsfContext3gpp,
	},

	{
		"DeleteSmsfContext3gpp",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		DeleteSmsfContext3gpp,
	},

	{
		"QuerySmsfContext3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-3gpp-access",
		QuerySmsfContext3gpp,
	},

	{
		"CreateSmsfContextNon3gpp",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		CreateSmsfContextNon3gpp,
	},

	{
		"DeleteSmsfContextNon3gpp",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		DeleteSmsfContextNon3gpp,
	},

	{
		"QuerySmsfContextNon3gpp",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/smsf-non-3gpp-access",
		QuerySmsfContextNon3gpp,
	},

	{
		"QuerySmsMngData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-mng-data",
		QuerySmsMngData,
	},

	{
		"QuerySmsData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-data",
		QuerySmsData,
	},

	{
		"QuerySmData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data",
		QuerySmData,
	},

	{
		"QueryTraceData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data",
		QueryTraceData,
	},

	{
		"CreateAMFSubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		CreateAMFSubscriptions,
	},

	{
		"ModifyAmfSubscriptionInfo",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		ModifyAmfSubscriptionInfo,
	},

	{
		"RemoveAmfSubscriptionsInfo",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		RemoveAmfSubscriptionsInfo,
	},

	{
		"GetAmfSubscriptionInfo",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/:servingPlmnId/ee-subscriptions/:subsId/amf-subscriptions",
		GetAmfSubscriptionInfo,
	},
}

var subRoutes = Routes{
	{
		"QueryEEData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/ee-profile-data",
		QueryEEData,
	},

	{
		"PatchOperSpecData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/operator-specific-data",
		PatchOperSpecData,
	},

	{
		"QueryOperSpecData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-specific-data",
		QueryOperSpecData,
	},

	{
		"GetppData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/pp-data",
		GetppData,
	},

	{
		"ModifyPpData",
		strings.ToUpper("Patch"),
		"/subscription-data/:ueId/pp-data",
		ModifyPpData,
	},

	{
		"GetIdentityData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/identity-data",
		GetIdentityData,
	},

	{
		"GetOdbData",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/operator-determined-barring-data",
		GetOdbData,
	},

	// Sepcial case
	{
		"RemovesubscriptionDataSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/subs-to-notify/:subsId",
		RemovesubscriptionDataSubscriptions,
	},
}

var subShortRoutes = Routes{
	{
		"GetSharedData",
		strings.ToUpper("Get"),
		"/subscription-data/shared-data",
		GetSharedData,
	},

	{
		"PostSubscriptionDataSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/subs-to-notify",
		PostSubscriptionDataSubscriptions,
	},
}

var eeShortRoutes = Routes{
	{
		"CreateEeGroupSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		CreateEeGroupSubscriptions,
	},

	{
		"QueryEeGroupSubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions",
		QueryEeGroupSubscriptions,
	},

	{
		"CreateEeSubscriptions",
		strings.ToUpper("Post"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		CreateEeSubscriptions,
	},

	{
		"Queryeesubscriptions",
		strings.ToUpper("Get"),
		"/subscription-data/:ueId/context-data/ee-subscriptions",
		Queryeesubscriptions,
	},
}

var eeRoutes = Routes{
	{
		"RemoveeeSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		RemoveeeSubscriptions,
	},

	{
		"UpdateEesubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId",
		UpdateEesubscriptions,
	},

	{
		"UpdateEeGroupSubscriptions",
		strings.ToUpper("Put"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		UpdateEeGroupSubscriptions,
	},

	{
		"RemoveEeGroupSubscriptions",
		strings.ToUpper("Delete"),
		"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId",
		RemoveEeGroupSubscriptions,
	},
}

var expoRoutes = Routes{
	{
		"CreateSessionManagementData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		CreateSessionManagementData,
	},

	{
		"DeleteSessionManagementData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		DeleteSessionManagementData,
	},

	{
		"QuerySessionManagementData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/session-management-data/:pduSessionId",
		QuerySessionManagementData,
	},

	{
		"CreateAccessAndMobilityData",
		strings.ToUpper("Put"),
		"/exposure-data/:ueId/access-and-mobility-data",
		CreateAccessAndMobilityData,
	},

	{
		"DeleteAccessAndMobilityData",
		strings.ToUpper("Delete"),
		"/exposure-data/:ueId/access-and-mobility-data",
		DeleteAccessAndMobilityData,
	},

	{
		"QueryAccessAndMobilityData",
		strings.ToUpper("Get"),
		"/exposure-data/:ueId/access-and-mobility-data",
		QueryAccessAndMobilityData,
	},

	{
		"ExposureDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/exposure-data/subs-to-notify",
		ExposureDataSubsToNotifyPost,
	},

	{
		"ExposureDataSubsToNotifySubIdDelete",
		strings.ToUpper("Delete"),
		"/exposure-data/subs-to-notify/:subId",
		ExposureDataSubsToNotifySubIdDelete,
	},

	{
		"ExposureDataSubsToNotifySubIdPut",
		strings.ToUpper("Put"),
		"/exposure-data/subs-to-notify/:subId",
		ExposureDataSubsToNotifySubIdPut,
	},
}

var appRoutes = Routes{
	{
		"ApplicationDataInfluenceDataSubsToNotifyGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/subs-to-notify",
		ApplicationDataInfluenceDataSubsToNotifyGet,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/application-data/influenceData/subs-to-notify",
		ApplicationDataInfluenceDataSubsToNotifyPost,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdDelete",
		strings.ToUpper("Delete"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdDelete,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdPatch",
		strings.ToUpper("Patch"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdPatch,
	},

	{
		"ApplicationDataInfluenceDataInfluenceIdPut",
		strings.ToUpper("Put"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataInfluenceIdPut,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifyGet",
		strings.ToUpper("Get"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataSubsToNotifyGet,
	},

	{
		"ApplicationDataInfluenceDataSubsToNotifyPost",
		strings.ToUpper("Post"),
		"/application-data/influenceData/:influenceId",
		ApplicationDataInfluenceDataSubsToNotifyPost,
	},
}
